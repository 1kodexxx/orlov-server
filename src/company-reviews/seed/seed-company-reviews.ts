// src/company-reviews/seed/seed-company-reviews.ts
import 'reflect-metadata';
import dataSource from '../../database/data-source';

import { testimonials } from '../../data/reviews.data';
import { CompanyReview } from '../company-reviews.entity';
import { User } from '../../users/users.entity';

function splitName(full: string): { firstName: string; lastName: string } {
  const parts = full.trim().split(/\s+/);
  if (parts.length === 1) return { firstName: parts[0], lastName: '' };
  return { firstName: parts[0], lastName: parts.slice(1).join(' ') };
}

async function ensureUser(
  idx: number,
  t: { author: string; role: string; avatar: string },
): Promise<User> {
  const userRepo = dataSource.getRepository(User);

  // —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π e-mail, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏ –Ω–µ –ø–ª–æ–¥–∏–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã
  const email = `seed${idx + 1}@orlov.local`;
  let user = await userRepo.findOne({ where: { email } });

  if (!user) {
    const { firstName, lastName } = splitName(t.author);
    user = userRepo.create({
      firstName,
      lastName,
      email,
      phone: null,
      passwordHash: '', // —É —Ç–µ–±—è –µ—Å—Ç—å NOT NULL; –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–∫ –¥–ª—è —Å–∏–¥–æ–≤
      role: 'customer',
      avatarUrl: t.avatar,
      tokenVersion: 0,
      headline: t.role,
      organization: null,
    } as User);

    user = await userRepo.save(user);
  } else {
    // –º—è–≥–∫–æ –æ–±–Ω–æ–≤–∏–º –≤–∏–¥–∏–º—ã–µ –ø–æ–ª—è (–Ω–∞ —Å–ª—É—á–∞–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞)
    user.avatarUrl = t.avatar;
    user.headline = t.role;
    await userRepo.save(user);
  }

  return user;
}

async function ensureReview(
  userId: number,
  text: string,
  rating = 5,
): Promise<void> {
  const reviewRepo = dataSource.getRepository(CompanyReview);

  // —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—É—Å–∫–µ ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ (customer_id, text)
  const exists = await reviewRepo.findOne({
    where: { customerId: userId, text },
  });
  if (exists) return;

  const entity = reviewRepo.create({
    customerId: userId,
    text,
    rating,
    isApproved: true,
  });
  await reviewRepo.save(entity);
}

async function run() {
  await dataSource.initialize();
  console.log('üì¶ Connected');

  try {
    for (let i = 0; i < testimonials.length; i++) {
      const t = testimonials[i];
      const user = await ensureUser(i, t);
      await ensureReview(user.id, t.text, 5);
    }
    console.log(`‚úÖ Inserted/updated ${testimonials.length} company reviews`);
  } catch (e) {
    console.error('‚ùå Seed failed:', e);
    process.exitCode = 1;
  } finally {
    await dataSource.destroy();
  }
}

run();
